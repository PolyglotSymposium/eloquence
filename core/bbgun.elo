(def identity (lambda (x) x))

(def not (lambda (x) (cond x () 1 1)))

(def take (lambda (n xs)
  (if (eq? 0 n)
    ()
    (cons (first xs) (take (- n 1) (tail xs))))))

(def drop (lambda (n xs)
  (if (eq? 0 n)
    xs
    (drop (- n 1) (tail xs)))))

(def map (lambda (f xs)
  (if xs
    (cons (f (first xs)) (map f (tail xs)))
    ())))

(def filter (lambda (f xs)
  (if xs
    (if (f (first xs))
      (cons (first xs) (filter f (tail xs)))
      (filter f (tail xs)))
    ())))
